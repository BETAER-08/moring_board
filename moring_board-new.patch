--- a/services/api.ts
+++ b/services/api.ts
@@ -1,15 +1,30 @@
 // services/api.ts
 import axios from 'axios';
+import AsyncStorage from '@react-native-async-storage/async-storage';
 import { BusArrivalInfo, BusRouteDetails, City, StopSearchResult, BusLocation, BusRouteStop, FavoriteBus } from '../types';
 import { allCities } from '../data/cities';
 
-const SERVICE_KEY = '8KL46HqqhxK4T/UAB0bJfFacYRrfoNpOhZrvgwr1MVBIdUAJqoOhZe7WZZwjsKSJbuatjZDvR2+GZBhvdBGdng==';
+const SERVICE_KEY = process.env.EXPO_PUBLIC_BUS_KEY as string;
+axios.defaults.timeout = 8000;
+
+const sleep = (ms:number)=>new Promise(r=>setTimeout(r,ms));
+async function withRetry<T>(fn:()=>Promise<T>, tries=3): Promise<T> {
+  let lastErr:any;
+  for (let i=0;i<tries;i++){
+    try { return await fn(); }
+    catch(e){ lastErr=e; await sleep(300*(i+1)); }
+  }
+  throw lastErr;
+}
+
+async function getCache<T>(k:string){ const v=await AsyncStorage.getItem(k); return v?JSON.parse(v) as T:null; }
+async function setCache<T>(k:string,v:T){ await AsyncStorage.setItem(k, JSON.stringify(v)); }
 
 /**
  * [테스트용 신규 추가] 정류소별 경유 노선 목록 조회
  * 부산 지역에서 API가 정상 동작하는지 테스트하기 위한 함수입니다.
  */
-export const fetchRoutesForStop_Test = async (stopId: string, cityCode: string): Promise<FavoriteBus[]> => {
+export const fetchRoutesForStop = async (stopId: string, cityCode: string): Promise<FavoriteBus[]> => {
   const url = `http://apis.data.go.kr/1613000/BusSttnInfoInqireService/getSttnThrghRouteList`;
   const params = {
     serviceKey: SERVICE_KEY,
@@ -19,7 +34,7 @@
     numOfRows: '150',
   };
   try {
-    const response = await axios.get(url, { params });
+    const response = await withRetry(() => axios.get(url, { params }));
     const items = response.data?.response?.body?.items?.item || [];
     const routeList = Array.isArray(items) ? items : [items];
     return routeList
@@ -40,7 +55,7 @@
     const url = `http://apis.data.go.kr/1613000/BusSttnInfoInqireService/getCrdntPrxmtSttnList`;
     const params = { serviceKey: SERVICE_KEY, _type: 'json', gpsLati: latitude, gpsLong: longitude, numOfRows: '1' };
     try {
-        const response = await axios.get(url, { params });
+        const response = await withRetry(() => axios.get(url, { params }));
         const item = response.data?.response?.body?.items?.item?.[0];
         if (item && item.citycode) {
             const cityCode = item.citycode.toString();
@@ -54,7 +69,7 @@
     const url = `http://apis.data.go.kr/1613000/BusSttnInfoInqireService/getCrdntPrxmtSttnList`;
     const params = { serviceKey: SERVICE_KEY, _type: 'json', gpsLati: latitude, gpsLong: longitude, numOfRows: '50' };
     try {
-        const response = await axios.get(url, { params });
+        const response = await withRetry(() => axios.get(url, { params }));
         const items = response.data?.response?.body?.items?.item || [];
         const stopList = Array.isArray(items) ? items : [items];
         return stopList.map((item: any) => ({ id: item.nodeid, name: item.nodenm, stopNo: item.nodeno, cityCode: item.citycode.toString(), direction: '' }));
@@ -64,7 +79,7 @@
   const url = `http://apis.data.go.kr/1613000/ArvlInfoInqireService/getSttnAcctoArvlPrearngeInfoList`;
   const params = { serviceKey: SERVICE_KEY, _type: 'json', nodeId: stopId, cityCode: cityCode, numOfRows: '100' };
   try {
-    const response = await axios.get(url, { params });
+    const response = await withRetry(() => axios.get(url, { params }));
     const items = response.data?.response?.body?.items?.item || [];
     const arrivalList = Array.isArray(items) ? items : [items];
     return arrivalList.map((item: any) => ({ routeId: item.routeid, routeNo: item.routeno.toString(), arrTime: Math.floor(item.arrtime / 60), remainingStops: item.arrprevstationcnt, }));
--- a/package.json
+++ b/package.json
@@ -19,7 +19,9 @@
     "expo-status-bar": "~2.2.3",
     "react": "19.0.0",
     "react-native": "0.79.5",
-    "react-native-google-mobile-ads": "^15.4.0"
+    "react-native-google-mobile-ads": "^15.4.0",
+    "@react-native-async-storage/async-storage": "^1.23.1",
+    "react-native-paper": "^5.12.5"
   },
   "devDependencies": {
     "@babel/core": "^7.25.2",
--- a/App.tsx
+++ b/App.tsx
@@ -12,7 +12,7 @@
 
 // LegacyApiService는 이전과 동일합니다.
 class LegacyApiService {
-    private readonly WEATHER_API_KEY = '8KL46HqqhxK4T/UAB0bJfFacYRrfoNpOhZrvgwr1MVBIdUAJqoOhZe7WZZwjsKSJbuatjZDvR2+GZBhvdBGdng==';
+    private readonly WEATHER_API_KEY = process.env.EXPO_PUBLIC_WEATHER_KEY as string;
     private convertToGrid(lat: number, lon: number) {
         const RE = 6371.00877; const GRID = 5.0; const SLAT1 = 30.0; const SLAT2 = 60.0;
         const OLON = 126.0; const OLAT = 38.0; const XO = 43; const YO = 136;
--- a/README.md
+++ b/README.md
@@ -0,0 +1,26 @@
+# RoutineBus (모닝 대시보드)
+
+아침 한 화면에서 **날씨 · 오늘 일정 · 자주 타는 버스 도착**을 확인하는 Expo(React Native) 앱.
+
+## 주요 변경점
+- 정류장에 실시간이 없어도 경유 노선은 항상 표시
+- 공공데이터 API 호출 타임아웃 8초, 재시도, 실패 시 마지막 캐시 사용
+- API 키를 `.env`로 이동
+
+## 설치
+```bash
+npm i
+npm i @react-native-async-storage/async-storage react-native-paper
+```
+
+## 환경변수
+루트에 `.env` 파일 생성:
+```
+EXPO_PUBLIC_BUS_KEY=<국토교통부 버스 API 키>
+EXPO_PUBLIC_WEATHER_KEY=<기상청 단기예보 API 키>
+```
+
+## 실행
+```bash
+npm run start
+```
